# -*- coding: utf-8 -*-
"""Stats_for_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/173kMfKw15ME81zT75aHXMarP12CtKv68

Matplotlib
"""

import matplotlib.pyplot as plt
import numpy as np

#mapping a line

x = np.array([0, 6])
y = np.array([0, 250])

plt.plot(x, y)
plt.show()

#mapping points

xpoints = np.array([1, 2, 6, 8])
ypoints = np.array([3, 8, 1, 10])

plt.plot(xpoints, ypoints,linestyle = 'dotted', color = 'r')
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.title("Sports Watch Data")
plt.show()

#Sub-plots

#plot 1:
x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])

plt.subplot(2, 2, 1)
plt.plot(x,y)

#plot 2:
x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])

plt.subplot(2, 2, 2)
plt.plot(x,y)

plt.show()

#Scatter plot

x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])

plt.scatter(x, y)
plt.show()

#histogram of normal distribution

x = np.random.normal(5.0, 1.0, 100000)

plt.hist(x, 100)
plt.show()

#Box plot

# Creating dataset
np.random.seed(10)
data = np.random.normal(100, 20, 200)   #mean, std, size

fig = plt.figure(figsize =(10, 7))

# Creating plot
plt.boxplot(data)

# show plot
plt.show()

"""Measures of Central Tendency

"""

#Mean

speed = [99,86,87,88,111]

x = np.mean(speed)

print(x)

#Median

speed = [99,86,87,88,111,86,103]

x = np.median(speed)

print(x)

#Mode

import statistics
speed = [99,86,87,88,111,86,103,87,94,78,77,85,86]

x = statistics.mode(speed)

print(x)

"""Measures of variability"""

#Standard Deviation

speed = [86,87,88,86,87,85,86]

x = np.std(speed)

print(x)

#Quartiles

values = [13,21,21,40,42,48,55,72]

x = np.quantile(values, [0,0.25,0.5,0.75,1])

print(x)

#percentile

values = [13,21,21,40,42,48,55,72]

x = np.percentile(values, 65)

print(x)

"""Inferential statistics- Statistical significance tests"""

#T-Test

from scipy.stats import ttest_ind
v1 = np.random.normal(size=100)
v2 = np.random.normal(size=100)

res = ttest_ind(v1, v2)

print(res)

#Statistical description

from scipy.stats import describe
v = np.random.normal(size=100)
res = describe(v)

print(res)

#Skewness and kurtotsis

from scipy.stats import skew, kurtosis

v = np.random.normal(size=100)

print(skew(v))
print(kurtosis(v))

"""Eigen values and Eigen vectors"""

from numpy.linalg import eig

a = np.array([[0, 2],
              [2, 3]])
w,v=eig(a)
print('E-value:', w)
print('E-vector', v)